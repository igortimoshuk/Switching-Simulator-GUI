<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="contextMenuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>